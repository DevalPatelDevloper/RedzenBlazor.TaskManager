@page "/"  
@using Redzen_Blazor_Vsix_Template.Models  
@using Redzen_Blazor_Vsix_Template.Services

<h3>Welcome to Task Manager</h3>  
<p>This is the landing page of RedzenBlazor.TaskManager</p>  

<h4>Completed Tasks</h4>  
@if (completedTasks != null && completedTasks.Any())  
{  
   <table class="table">  
       <thead>  
           <tr>  
               <th>Title</th>  
               <th>Assigned To</th>  
               <th>Status</th>  
           </tr>  
       </thead>  
       <tbody>  
           @foreach (var task in completedTasks)  
           {  
               <tr>  
                   <td>@task.Title</td>  
                   <td>@task.AssignedTo</td>  
                   <td>@task.Status</td>  
               </tr>  
           }  
       </tbody>  
   </table>  
}  
else  
{  
   <p>No completed tasks available.</p>  
}  

<h3>Task Dashboard</h3>  

<table class="table">  
   <thead>  
       <tr>  
           <th>Title</th>  
           <th>Assigned To</th>  
           <th>Status</th>  
       </tr>  
   </thead>  
   <tbody>
        @foreach (var task in tasks.Where(t => t.Status == Models.TaskStatus.Pending || t.Status == Models.TaskStatus.InProgress))
        {  
           <tr>  
               <td>@task.Title</td>  
               <td>@task.AssignedTo</td>  
               <td>@task.Status</td>  
           </tr>  
       }  
   </tbody>  
</table>  
<div>
    <NavLink href="/add-task" class="nav-link">
        <span class="oi oi-plus"></span> Add Task
    </NavLink>
</div>

@code {  
   private List<TaskItem> completedTasks = new();  
   private List<TaskItem> tasks = new();  

   protected override void OnInitialized()  
   {  
       tasks = TaskService.GetTasks();  
       UpdateTaskLists();  

       // Simulate real-time updates  
       _ = PeriodicUpdate();  
   }  

   private async Task PeriodicUpdate()  
   {  
       while (true)  
       {  
           await Task.Delay(5000); // every 5 seconds  
           TaskService.UpdateRandomTaskStatus();  
           tasks = TaskService.GetTasks();  
           UpdateTaskLists();  
           StateHasChanged();  
       }  
   }  

   private void UpdateTaskLists()  
   {  
        completedTasks = tasks.Where(t => t.Status == Models.TaskStatus.Completed).ToList();
   }  

   private void GoToAddTask()  
   {  
       NavigationManager.NavigateTo("/add-task");  
   }  

   [Inject]  
   private NavigationManager NavigationManager { get; set; }  

   [Inject]  
    private TaskService TaskService { get; set; }
}
